// 节点的度： 节点的子树个数
// 树的度： 树的所有节点中最大的度数
// 叶节点： 度为0的节点(也称为叶子节点)
// 父节点、 子节点、 兄弟节点
// 路径和路径长度： 从根节点(n1) 到nk的一个节点序列为n1, n2, ..., nk。 路径中所包含的节点个数称为路径长度
// 节点的层次： 规定根节点在1层, 其它任意节点的层数是其父节点的层数加1
// 树的深度： 树中所有节点中的最大层次是这颗树的深度

// 重要： 所有的树都可以被抽象为二叉树

// 重要： 一个二叉树第i层的最大节点数为： 2 ^ (i - 1), i >= 1;
// 重要： 深度为k的二叉树的最大节点总数为： 2 ^ k - 1, k >= 1;
// 重要： 对任何非空二叉树, 若n0表示叶节点的个数, n2是度为2的节点的个数, 则满足n0 = n2 + 1;

// 完美二叉树： 除最下一层的叶节点外, 每层节点都有2个子节点
// 完全二叉树： 除最后一层外, 其它各层的节点数都达到最大个数, 最后一层从左至右的叶节点连续存在, 只缺少右侧的若干节点

// 重要： 二叉搜索树
// 二叉搜索树是一棵二叉树满足：
// 非空左子树的值小于父节点的值, 非空右子树的值大于父节点的值
// 二叉搜索树的搜索效率非常高